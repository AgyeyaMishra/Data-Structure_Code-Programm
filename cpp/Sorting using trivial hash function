// C++ program to sort an array using hash
// function with negative values allowed.
#include <bits/stdc++.h>
using namespace std;

void sortUsingHash(int a[], int n)
{
	// find the maximum element
	int max = *std::max_element(a, a + n);
	int min = abs(*std::min_element(a, a + n));

	// create a hash function upto the max size
	int hashpos[max + 1] = { 0 };
	int hashneg[min + 1] = { 0 };

	// traverse through all the elements and
	// keep a count
	for (int i = 0; i < n; i++) {
		if (a[i] >= 0)
			hashpos[a[i]] += 1;
		else
			hashneg[abs(a[i])] += 1;
	}

	// Traverse up to all negative elements and
	// check if it is present or not. If it is
	// present, then print the element the number
	// of times it's present. Once we have printed
	// n times, that means we have printed n elements
	// so break out of the loop
	for (int i = min; i > 0; i--) {
		if (hashneg[i]) {

			// print the element that number of times
			// it's present. Print the negative element
			for (int j = 0; j < hashneg[i]; j++) {
				cout << (-1) * i << " ";
			}
		}
	}

	// Traverse upto all elements and check if it is
	// present or not. If it is present, then print
	// the element the number of times it's present
	// once we have printed n times, that means we
	// have printed n elements, so break out of the
	// loop
	for (int i = 0; i <= max; i++) {

		// if present
		if (hashpos[i]) {

			// print the element that number of times
			// it's present
			for (int j = 0; j < hashpos[i]; j++) {
				cout << i << " ";
			}
		}
	}
}

// driver program to test the above function
int main()
{
	int a[] = { -1, -2, -3, -4, -5, -6, 8,
				7, 5, 4, 3, 2, 1, 0 };
	int n = sizeof(a) / sizeof(a[0]);
	sortUsingHash(a, n);
	return 0;
}
